#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <list>
#include <math.h>
#include <iomanip>

struct point{

	float x, y;
//	point* crossLink;
	std::list<point>::iterator crossLink;
	bool isIntersect;
};

class polygon{
	public:
	std::list<point> cor;	//coordinates
	int size;
	bool designate;
	point minX, maxX;
	polygon(const int n, int* arr){
		size = n;
		point temp;
		for(int i = 0; i < n; i++){
			temp.x = arr[2*i];
			temp.y = arr[2*i+1];
			temp.isIntersect = false;
			cor.push_back(temp);
			designate = false;
		}
	}
};

float det(point a, point b){

	float x1 = a.x;
	float y1 = a.y;
	float x2 = b.x;
	float y2 = b.y;

	return (x1*y2 - x2*y1);
}

float det(float x1, float x2, float y1, float y2){

	return (x1*y2 - x2*y1);
}

point intersection(point a1, point a2, point b1, point b2){

	point temp;
	point nil;
	nil.x = nil.y = -1.0;
	
//	std::cout<<"Points Considered: A-> "<<"("<<a1.x<<", "<<a1.y<<") AND "<<"("<<a2.x<<", "<<a2.y<<")"<<std::endl;
//	std::cout<<"Points Considered: B-> "<<"("<<b1.x<<", "<<b1.y<<") AND "<<"("<<b2.x<<", "<<b2.y<<")"<<std::endl;
	if(a1.x == b1.x && a1.y == b1.y) return a1;
	if(a1.x == b2.x && a1.y == b2.y) return a1;
	if(a2.x == b1.x && a2.y == b1.y) return a2;
	if(a2.x == b2.x && a2.y == b2.y) return a2;

	float deta12 = det(a1, a2);
	float detb12 = det(b1, b2);
	float detax = a1.x - a2.x;
	float detay = a1.y - a2.y;
	float detbx = b1.x - b2.x;
	float detby = b1.y - b2.y;

	//int dotProduct = detax;

	float discriminant = det(detax, detay, detbx, detby);
	if (discriminant != 0){
		temp.x =  det(deta12, detb12, detax, detbx)/discriminant;
		temp.y =  det(deta12, detb12, detay, detby)/discriminant;

		float dotproduct1 = (temp.x-a1.x)*(temp.x-a2.x) + (temp.y-a1.y)*(temp.y-a2.y);
		float dotproduct2 = (temp.x-b1.x)*(temp.x-b2.x) + (temp.y-b1.y)*(temp.y-b2.y); 
		
		if(dotproduct1 <= -0 && dotproduct2 <= -0) return temp;
		
		else return nil;

	}
	else{				//parallel case
//	std::cout<<"count"<<std::endl<<std::endl;
//		float par1 = a1.x - b1.x;
//		float par2 = a1.y - b1.y;
//		if(det(par1, detax, par2, detay) == 0){
//			if(dist(a1, b1) + dist(a1, b2) == dist(b1, b2) || dist(a2, b1) + dist(a2, b2) == dist(b1, b2)){
				
//			}
//			if(dist(a1, b1) + dist(a1, b2) == dist(b1, b2)){
//				if(dist(a2, b1) + dist(a2, b2) == dist(b1, b2) && dist(a2, b1) > dist(a1, b1)) return a2;
//				else return a1;
//			}
//		}
		return nil;
	}
}

bool isValid(point intersect, std::list<point>::iterator Abegin, std::list<point>::iterator Aend,
						std::list<point>::iterator Bbegin, std::list<point>::iterator Bend, 
						std::list<point>::iterator itA, std::list<point>::iterator itB){

	if(intersect.x != -1){

		return true;

	}
	else return false;
}


bool isInside(point K, polygon A){

	point a1, a2;
	a2.x = K.x; a2.y = K.y;
	a1.x = -1; a1.y = K.y;
	int count = 0;
	std::list<point>::iterator itA, itAnext;
	A.cor.push_back(*(A.cor.begin()));

	float prev;
	bool oncomingFlag = false;
	itAnext = A.cor.begin();
	itA = itAnext++;
		
	for(; itAnext != A.cor.end(); itA++){

		if(itA->y == K.y && itAnext->y == K.y &&((itA->x < K.x && itAnext->x > K.x)||(itA->x > K.x && itAnext->x < K.x))) return false;
		point cuts = intersection(*itA, *itAnext, a1, a2);
		if(cuts.y != -1){
		//	std::cout<<"ADG"<<std::endl;
			if((itA->x == cuts.x && itA->y == cuts.y) ||(itAnext->x == cuts.x && itAnext->y == cuts.y)){
				if(oncomingFlag){
					oncomingFlag = false;
					if((itAnext->y > K.y && prev < K.y) ||(itAnext->y < K.y && prev > K.y)) count++;
				}
				else{
					oncomingFlag = true;
					prev = itA->y;	

				}
			}
			if(K.x == cuts.x) return false;
			count++;//std::cout<<"ADG"<<std::endl;}
		}
		itAnext++;
	}

	if(count%2 == 1) return true;

	return false;
}


void printPolygon(polygon p){

	std::list<point>::iterator it;

	for(it = p.cor.begin(); it != p.cor.end(); it++)
	std::cout<<"Polygon: "<<"("<<it->x<<", "<<it->y<<")\t"<< it->isIntersect <<std::endl;
	std::cout<<std::endl;
}

void printPolygon(std::list<point> p){

	std::list<point>::iterator it;

	for(it = p.begin(); it != p.end(); it++)
	std::cout<<"Polygon: "<<"("<<it->x<<", "<<it->y<<")\t"<< it->isIntersect <<std::endl;
	std::cout<<std::endl;

}

float dist(point A, point B){

	float xdist = A.x - B.x;
	float ydist = A.y - B.y;

	if(xdist < 0) xdist = -xdist;
	if(ydist < 0) ydist = -ydist;

	return xdist + ydist;

}

bool findOverlapPoly(polygon A, polygon B){ 

	std::list<point>::iterator itA, itB, itAnext, itBnext, itAprev, itBprev, itAcnext,itBcnext;

	std::list<point> overlapped;

	A.cor.push_back(*(A.cor.begin()));
	B.cor.push_back(*(B.cor.begin()));

	float BmaxX = -1, BminX = -1;
	polygon Acopy = A, Bcopy = B;
	itAcnext = ++Acopy.cor.begin();	

	itAnext = A.cor.begin();
	itA = itAnext++;
	for(; itAnext != A.cor.end(); itA++){

		itBnext = B.cor.begin();
		itB = itBnext++;

		itBcnext = Bcopy.cor.begin();

		//itBcnext++;
		for(; itBnext != B.cor.end(); itB++){

			itBcnext++;
			while(itBcnext->isIntersect) itBcnext++;// std::cout<<"itBcnext changed to"<<std::endl;}
//			std::cout<<"itBcnext: "<<"("<< (itBcnext)->x <<", "<<(itBcnext)->y<<")" <<std::endl;
//			std::cout<<itBcnext->isIntersect<<std::endl;

//			std::cout<<"Points Considered: A-> "<<"("<<itA->x<<", "<<itA->y<<") AND "<<"("<<itAnext->x<<", "<<itAnext->y<<")"<<std::endl;
//			std::cout<<"Points Considered: B-> "<<"("<<itB->x<<", "<<itB->y<<") AND "<<"("<<itBnext->x<<", "<<itBnext->y<<")"<<std::endl;

//			std::cout<<std::endl;
//			std::cout<<"("<<intersect.x<<", "<<intersect.y<<")"<<std::endl;

//			printPolygon(Acopy);
//			printPolygon(Bcopy);

			if(itBnext->x < BminX || BminX == -1) BminX = itBnext->x;
			if(itBnext->x > BmaxX) BmaxX = itBnext->x;

			point intersect = intersection(*itA, *(itAnext), *itB, *(itBnext));
			if(isValid(intersect, A.cor.begin(), A.cor.end(), B.cor.begin(), B.cor.end(), itA, itB)){		//guidance go
				
//				std::cout<<"Found point between "<<std::endl;
//				std::cout<<"("<<intersect.x<<", "<<intersect.y<<")"<<std::endl;

				Acopy.cor.insert(itAcnext, intersect);
				Bcopy.cor.insert(itBcnext, intersect);

				std::list<point>::iterator itAtemp = --itAcnext, itAint = itAtemp;
				std::list<point>::iterator itBtemp = --itBcnext, itBint = itBtemp;
				itAcnext++;
				itBcnext++;


//				printPolygon(Bcopy);

			//	if(dist(*itAint ,*itAcnext) > && dist(*itBint,*inBnext) > 0 && dist(*itA, *itAnext) > 0 && dist(*itB, *itBnext) > 0) return true;
			//	else if(
				while(dist(*(--itAtemp), *itAcnext) < dist(*itAint ,*itAcnext)){
					Acopy.cor.insert(itAtemp, *itAint);
					Acopy.cor.erase(itAint);
					itAint = --itAtemp;
				}

				while(dist(*(--itBtemp), *itBcnext) < dist(*itBint ,*itBcnext)){

//					std::cout<<"itInt: "<<"("<< itBcnext->x <<", "<<itBcnext->y<<")" <<std::endl;;
//					std::cout<<"dist: "<< dist(*itBtemp, *itBcnext)<<", "<<dist(*itBint,*itBcnext)<<std::endl;
					Bcopy.cor.insert(itBtemp, *itBint);
					Bcopy.cor.erase(itBint);
					itBint = --itBtemp;
				}

				
				itAint->crossLink = itBint;
				itBint->crossLink = itAint;
				itAint->isIntersect = true;
				itBint->isIntersect = true;
				
				overlapped.push_back(intersect);

//				printPolygon(Bcopy);
			//	itBnext++;itB++;

			}
			itBnext++;
			
		}

		itAnext++;
		itAcnext++;
	}

	A.cor.pop_front();
	A.cor.push_back(*(--A.cor.end()));
	A.cor.pop_back();

	B.cor.pop_front();
	B.cor.push_back(*(--B.cor.end()));
	B.cor.pop_back();

	Acopy.cor.pop_front();
	Acopy.cor.push_back(*(--A.cor.end()));
	Acopy.cor.pop_back();

	Bcopy.cor.pop_front();
	Bcopy.cor.push_back(*(--B.cor.end()));
	Bcopy.cor.pop_back();

	
//	std::cout<<"Polygon A:- "<<std::endl;
//	printPolygon(Acopy);
//	std::cout<<"Polygon B:- "<<std::endl;
//	printPolygon(Bcopy);

//	std::cout<<"points of itesection: "<< std::endl;
//	printPolygon(overlapped);


	std::list<point>::iterator it, itnext, itprev;
	point temporary;

	for(it = Acopy.cor.begin(); it != Acopy.cor.end(); it++){
		
		it++;
		if(it == Acopy.cor.end()) itnext = Acopy.cor.begin();
		else itnext = it;
		it--;

		if(it->x == itnext->x && it->y == itnext->y) continue;

//		std::cout<<"("<<it->x<<", "<<it->y<<") AND ("<< itnext->x<<", "<<itnext->y<<")"<<std::endl;

		temporary.x = (it->x + 0.342*itnext->x)/1.342;
		temporary.y = (it->y + 0.342*itnext->y)/1.342;
		if(isInside(temporary, B)){ 

//				std::cout<<"("<<temporary.x<<", "<<temporary.y<<")"<<std::endl;			
			return true;
		}

	}

	return false;

}

float centroidDist(polygon A, polygon B){

	std::list<point>::iterator it;
	int lengthA = 0, lengthB = 0;
	float Axcentroid = 0, Aycentroid = 0, Bxcentroid = 0, Bycentroid = 0;
	for(it = A.cor.begin(); it != A.cor.end(); it++){
		lengthA++;
		Axcentroid = Axcentroid + it->x;
		Aycentroid = Aycentroid + it->y;
	}

	for(it = B.cor.begin(); it != B.cor.end(); it++){
		lengthB++;
		Bxcentroid = Bxcentroid + it->x;
		Bycentroid = Bycentroid + it->y;
	}

	Axcentroid = Axcentroid/lengthA;
	Aycentroid = Aycentroid/lengthA;
	Bxcentroid = Bxcentroid/lengthB;
	Bycentroid = Bycentroid/lengthB;

	return sqrt(pow(Axcentroid-Bxcentroid, 2) + pow(Aycentroid-Bycentroid, 2));
}

float findMin(float a, float b){

	if (b < -0.5 || a < b) return a;
	else return b;
}


bool isBadPoly(int* arr, int len){

//std::cout<<"called"<<std::endl;
	if(len < 6 || len > 40 || len%2 != 0) return true;
//std::cout<<len<<std::endl;


	int sum = 0;
	for(int i = 0; i < len-2; i+=2){
//		sum = sum + (arr[i+1] + arr[i+3])*(arr[i+2] - arr[i]);
		sum = sum + det(arr[i], arr[i+1], arr[i+2], arr[i+3]);
	}
	sum = sum + det(arr[len-2], arr[len-1], arr[0], arr[1]);
	if(sum > 0){return true;}

	
	point p1, p2, p3, p4;

	for(int i = 4; i < len; i += 2){

		int j;

		p3.x = arr[i];
		p3.y = arr[i+1];
		if(i != len-2){
			p4.x = arr[i+2];
			p4.y = arr[i+3];
			j = 0;
		}
		else {p4.x = arr[0]; p4.y = arr[1]; j = 2;}		
		for(; j < i-2; j+=2){
			p1.x = arr[j];
			p1.y = arr[j+1];
			p2.x = arr[j+2];
			p2.y = arr[j+3];
			
			if(p3.x < 0 || p3.y < 0 || p4.x < 0 || p4.y < 0) return true; 
//			std::cout<<"("<< i<<", "<<j<<std::endl;
			point intersect = intersection(p1, p2, p3, p4);
			if(intersect.x != -1) return true;
		}
	}
	return false;
}


int main(){

//	std::cout<<"BAD "<< 3 <<std::endl;
//	return 0;

//	clock_t t1,t2;
	
	std::ifstream inFile;
	inFile.open("input.txt");

	if(inFile.fail()){
//		std::cout<<"Error Opening File"<< std::endl;
		std::vector<int> asd; asd[2] = 2;
		return 0;
	}

	int n, i = 0;

	inFile >> n;
	
	if(n == 1) {std::vector<int> asd; asd[2] = 2;}

	std::vector<polygon> p;
	polygon* tmp;
	std::string line;

	std::getline(inFile, line);
	int arr[100];
	while(std::getline(inFile, line)){

//		std::vector<int> asd; asd[2] = 2;
		std::istringstream iss(line);
		int j = 0;
		while(iss >> arr[j]) j++;

		if(!isBadPoly(arr, j)){
//			std::vector<int> asd; asd[2] = 2;
			tmp = new polygon(j/2, arr);
			p.push_back(*tmp);
			i++;
		}
		else break;
	}

	if(n != i){
		i++;
//		std::vector<int> asd; asd[2] = 2;
		std::cout<<"BAD "<<i<<std::endl;
		return 0;
	}

	float distance[n][n];

	for(int g = 0; g < n; g++){

		distance[g][g] = 0;
	}

	for(int g = 0; g < n; g++){
		for(int h = 0; h < g; h++){

			if(findOverlapPoly(p[g], p[h])){

				distance[g][h] = distance[h][g] = centroidDist(p[h], p[g]);
		
			}
			else{
				distance[g][h] = distance[h][g] = -1;
			}
		}
	}

	
	float mindist[n];
	std::fill_n(mindist, n, -1);
	bool visited[n];
	std::fill_n(visited, n, false);
	mindist[0] = 0;
	
	for(int g = 0; g < n; g++){
		int u;
		float min = -1.0;
		for(int v = 0; v < n; v++){
			if( !visited[v] && (mindist[v] < min || min < -0.5) && mindist[v] > -0.5) {u = v; min = mindist[v];}
		}

		visited[u] = true;

		for(int h = 0; h < n; h++){
			if(distance[u][h] > -0.5 && (!visited[h])){
				if((mindist[h] < -0.5) || (mindist[h] > mindist[u] + distance[u][h])){
					mindist[h] = mindist[u] + distance[u][h];
				}
			}
		}
	}
//	for(int g = 0; g < n; g++){
//		for(int h = 0; h < n; h++) {
//			std::cout<<distance[g][h]<<"\t";
//		} std::cout<<std::endl;
//	}
	

	for(int g = 0; g < n; g++){
		if(visited[g] == false){
//				std::vector<int> asd; asd[2] = 2;

			std::cout<<"DISCONNECTED "<< ++g <<std::endl;
			return 0;
		}
	}


//	point a;
//	for(a.y = 11; a.y >= 4; a.y-=0.2){
//		std::cout<<a.y;
//		for(a.x = 2; a.x < 17; a.x+=0.2){
//	a.x = 15;  a.y = 19;
//	if(isInside(a, p[0])) std::cout <<"*";
//			else std::cout<<" ";			
//		}
//
//		std::cout<<std::endl;
//	}

	std::vector<int> asd; asd[2] = 2;
	std::cout<<"CONNECTED"<<std::endl;
	for(int g = 1; g < n; g++){
		std::cout << std::fixed << std::setprecision(2) << mindist[g] <<std::endl;
	}

	return 0;
}

